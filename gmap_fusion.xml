<tool id="gmap-fusion" name="GMAP-fusion" version="0.0.1">
    <description>Fusion-finding Using De novo RNA-Seq Transcript Assemblies</description>
    <requirements>
        <requirement type="set_environment">FUSION_RESOURCES</requirement>
        <requirement type="set_environment">TRINTOOLS</requirement>
    </requirements>
    <command>
      \$TRINTOOLS/GMAP-fusion_v0.0.1/GMAP-fusion 
      -T $assembled_trans 
      --left_fq $left_input
      --right_fq $right_input
      --genome_lib_dir \$FUSION_RESOURCES
      --output "subdir" 
    </command>
    <stdio>
      <exit_code range="1:"  level="fatal"   description="Error returned from pipeline" />
    </stdio>
    <regex match="Must investigate error above."
           source="stderr"
           level="fatal"
           description="Unknown error encountered" />
    <inputs>
      <param format="fasta" name="assembled_trans" type="data" label="Assembled Transcripts (ie. Trinity or DISCASM output)" help="Trinity or DISCASM generated transcript fasta"/>
      <param format="fastq" name="left_input" type="data" label="Left/Forward strand reads" help="Forward strand reads"/>
      <param format="fastq" name="right_input" type="data" label="Right/Reverse strand reads" help="Reverse strand reads"/>
    </inputs>
    <outputs>
      <data format="tabular" name="gmapfusion_candidates" label="${tool.name} on ${on_string}: GMAP-fusion candidates" from_work_dir="subdir/GMAP-fusion.final"/>
    </outputs>
    <help>
.. class:: infomark

GMAP-fusion is a utility for identifying candidate fusion transcripts based on transcript sequences reconstructed via RNA-Seq de novo transcriptome assembly.  Please read more here_.

.. _here: https://github.com/GMAP-fusion/GMAP-fusion/wiki
    </help>
    <tests>
      <test>
        <param name="left_input" value="GMAP/reads_1.fq.gz" />
        <param name="right_input" value="GMAP/reads_2.fq.gz" />
        <param name="assembled_trans" value="GMAP/transcripts.fa" />
        <output name="gmapfusion_candidates">
            <assert_contents>
               <has_line_matching expression=".+" />
            </assert_contents>
        </output>
        <!--
        <param name="left_input" value="FLI1.left.fq" />
        <param name="right_input" value="FLI1.right.fq" />
        <param name="assembled_trans" value="FIX- Need output file here" />
        <output name="cancertab">
            <assert_contents>
               <has_line line="CHROM&#009;POS&#009;REF&#009;ALT&#009;GENE&#009;DP&#009;QUAL&#009;MQ&#009;SAO&#009;NSF&#009;NSM&#009;NSN&#009;TUMOR&#009;TISSUE&#009;COSMIC_ID&#009;KGPROD&#009;RS&#009;PMC&#009;CRAVAT_PVALUE&#009;CRAVAT_FDR&#009;VEST_PVALUE&#009;VEST_FDR" />
               <has_line_matching expression="^chr11.*" />
            </assert_contents>
        </output>
        <output name="cancerVariants">
            <assert_contents>
               <has_line line="#CHROM&#009;POS&#009;ID&#009;REF&#009;ALT&#009;QUAL&#009;FILTER&#009;INFO&#009;FORMAT&#009;dataset_1" />
               <has_line_matching expression=".+" />
            </assert_contents>
        </output>
        <output name="cancerIndex">
            <assert_contents>
               <has_line_matching expression=".+" />
            </assert_contents>
        </output>
        <output name="allVariants">
            <assert_contents>
               <has_line_matching expression=".+" />
            </assert_contents>
        </output>
        <output name="bamFile">
            <assert_contents>
               <has_line_matching expression=".+" />
            </assert_contents>
        </output>
        -->
      </test>
    </tests>
</tool>
